Ways to secure APIs
Form Based Authentication
Basic Authentication
JWT Authentication
OAuth Authentication


JWT Authentication
Validate User Credentials
3 Beans
SecurityFilterChain - This will authorize all the requests.
AuthenticationManager - It will authenticate user credentials
AuthenticationManager is used to validate username and password entered by user with the username and password stored in the database
it internally implements the inerface UserDetailsService and loads the user details from Database using the entered the email and validate them with the details entered by the user. If the details are valid it will set the authentication to true.

Generate JWT for authenticated user
Handle API's using valid Token

add dependency
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
Create a security package
Create a class named as SecurityConfig
add @Configuration and @EnableWebSecurity annotations

create two bean methods
 @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        httpSecurity.authorizeHttpRequests((authorize) -> authorize.anyRequest()
                .authenticated()).httpBasic(Customizer.withDefaults());

        return httpSecurity.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

AuthenticationManager is used to validate username and password entered by user with the username and password stored in the database

Create a endpoint in Usercontroller
 @PostMapping("/login")
    public ResponseEntity<String> loginUser(@RequestBody LoginDto loginDto) {
	// take the email, password from user and authenticate
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginDto.getEmail(), loginDto.getPassword())
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);
        return new ResponseEntity<>("User logged in Successfully", HttpStatus.OK);
    }


create a security package
create a CustomUserDetailsServce class which implemets UserDetailsService which has a method loadUserByUsername(String username)
This method loads the data based on the email provided
Create a method findByEmail in UserRepo

@Service
public class CustomUserDetailsService implements UserDetailsService {
    @Autowired
    private UsersRepository usersRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        Users user = usersRepository.findByEmail(email).orElseThrow(
                () -> new UsernameNotFoundException(String.format("Email %s Not Found", email))
        );
        Set<String> roles = new HashSet<String>();
        roles.add("ROLE_ADMIN");
        return new User(user.getEmail(), user.getPassword(), userAuthorities(roles));
    }

    private Collection<? extends GrantedAuthority> userAuthorities(Set<String> roles) {
        return roles.stream().map(
                        role -> new SimpleGrantedAuthority(role))
                .collect(Collectors.toList());
    }
}

To assign roles to the API's
add @PreAuthorize(value = "ROLE_ADMIN") annotation on the controller methods


Disable Securityfor authentication related requests
.antMatchers("/api/users/**)

AuthenticationManager validates encoded password with entered password
So we need to encode the password while storing/registering the password itself


Generate JWT for authenticated user
=======================================
JSON Web Token (JWT)

JWT.io official website

Example token:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

3 parts in JWT
Header - What type of algorithm and token type
Payload - Data
Signature - pattern of the token

add maven dependency of JWT
<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt -->
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt</artifactId>
    <version>0.12.6</version>
</dependency>


Create a JwtTokenProvider class in security package

@Component
public class JwtTokenProvider {
    public String generateToken(Authentication authentication) {
        String email = authentication.getName();
        Date currentDate = new Date();
        Date expireDate = new Date(currentDate.getTime() + 3600000);

        String token = Jwts.builder()
                .setSubject(email)
                .setIssuedAt(currentDate)
                .setExpiration(expireDate)
                .signWith(SignatureAlgorithm.HS256, "JWTSecretKeyForTheBackendTaskManagementProject")
                .compact();

        return token;
    }

    public String getEmailFromToken(String token) {
        Claims claims = Jwts.parser()
                .setSigningKey("JWTSecretKeyForTheBackendTaskManagementProject")
                .build()
                .parseClaimsJws(token)
                .getBody();

        return claims.getSubject();
    }
}

Error: The signing key's size is 72 bits which is not secure enough for the HS256 alogrithm
Increase the signing key size to >=256 bits 32 bytes

.setSigningKey("JWTSecretKeyForTheBackendTaskManagementProject")

Create a Jwt token reponse class in payload package to return a JSON object in the contoller

public class JwtTokenResponse {
    private String token;
    private String tokenType = "Bearer";

    public JwtTokenResponse(String token) {
        this.token = token;
    }

    public String getToken() {
        return token;
    }

Add the token in controller class in "/login" end point

String token = jwtTokenProvider.generateToken(authentication); //get the token
        return new ResponseEntity<>(new JwtTokenResponse(token), HttpStatus.OK);

Handle API's using valid Token
===================================

To authenticate every request using a valid token

create a JwtAuthenticatioFiletr calss in security package
@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    @Autowired
    private JwtTokenProvider jwtTokenProvider;

    @Autowired
    private CustomUserDetailsService customUserDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        //get the token from headers
        String token = getToken(request);
        //check the token
        if (StringUtils.hasText(token) && jwtTokenProvider.validateToken(token)) {
            String email = jwtTokenProvider.getEmailFromToken(token);
            UserDetails userDetails = customUserDetailsService.loadUserByUsername(email);
            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }
        filterChain.doFilter(request, response);
    }

    private String getToken(HttpServletRequest request) {
        String token = request.getHeader("Authorization");
        if (StringUtils.hasText(token) && token.startsWith("Bearer ")) {
            return token.substring(7);
        }
        return null;
    }
}

Add validate token method in JwtTokenProvider
public boolean validateToken(String token) {
        try {
            Jwts.parser()
                    .setSigningKey("JWTSecretKeyForTheBackendTaskManagementProject")
                    .build()
                    .parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            throw new APIException("Token Issue" + e.getMessage());
        }
    }

In SecurityConfig file add 
http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);